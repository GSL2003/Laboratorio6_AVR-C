
PostLab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000154  00800100  00000422  000004b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000422  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800254  00800254  0000060a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae3  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079d  00000000  00000000  000011cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000057d  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00001eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000457  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030a  00000000  00000000  00002487  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002791  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e5       	ldi	r26, 0x54	; 84
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 35       	cpi	r26, 0x57	; 87
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  9e:	0c 94 0f 02 	jmp	0x41e	; 0x41e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
#include <avr/interrupt.h>

void ADC_init(void)
{	
	
	ADMUX = 0;	
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	//Seleccionar el voltaje de referencia
	ADMUX |= (1<<REFS0);
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX |= (0<<REFS1);
  b2:	80 81       	ld	r24, Z
  b4:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR);	// Se define que se trabajara con 10 bits
  b6:	80 81       	ld	r24, Z
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	80 83       	st	Z, r24
	ADCSRA = 0;
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	10 82       	st	Z, r1
	
	// Configuración Prescaler de 128 --> 16M/128 = 125KHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  c2:	80 81       	ld	r24, Z
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN); // Se enceinde el ADC y se activa su interruptor de igual forma
  c8:	80 81       	ld	r24, Z
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE);
  ce:	80 81       	ld	r24, Z
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <initUART9600>:
}

//Inicializar la función del UART
void initUART9600(void){
	//Paso1: Configurar pines TX y RX
	DDRD &= ~(1<<DDD0);		//Se configura el RX (PD0) como entrada
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	8e 7f       	andi	r24, 0xFE	; 254
  da:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);		//Se configura el TX (PD1) como salida
  dc:	8a b1       	in	r24, 0x0a	; 10
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	8a b9       	out	0x0a, r24	; 10
	
	//Paso2: Configurar registro A ---> Modo FAST U2X0 = 1
	UCSR0A = 0;
  e2:	e0 ec       	ldi	r30, 0xC0	; 192
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	10 82       	st	Z, r1
	UCSR0A |= (1<<U2X0);
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
	
	//Paso3: Configurar registro B --> Habilitar ISR RX, se habilita RX y TX
	//->>Se configura para tener interrupciones
	UCSR0B = 0;		//Se pone en 0 para mayor facilidad de configurar posteriomente
  ee:	e1 ec       	ldi	r30, 0xC1	; 193
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  f4:	80 81       	ld	r24, Z
  f6:	88 69       	ori	r24, 0x98	; 152
  f8:	80 83       	st	Z, r24
	
	//Paso4: Configurar C > Frame (Se define el frame): 8 bits datos, no paridad, 1 bit de stop
	UCSR0C = 0;    //--> Se configura si se desea modo: asincrono o sincrono
  fa:	e2 ec       	ldi	r30, 0xC2	; 194
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);	//Se configura el tamaño del caracter --> 8 bits
 100:	80 81       	ld	r24, Z
 102:	86 60       	ori	r24, 0x06	; 6
 104:	80 83       	st	Z, r24
	
	//Paso5: Baudrate = 9600
	UBRR0 = 207;
 106:	8f ec       	ldi	r24, 0xCF	; 207
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 10e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 112:	08 95       	ret

00000114 <writeUART>:
}

void writeUART(char caractrer){
	while(!(UCSR0A &(1<<UDRE0)));		//La función se queda en espera hasta que UDR este en 1
 114:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 118:	95 ff       	sbrs	r25, 5
 11a:	fc cf       	rjmp	.-8      	; 0x114 <writeUART>
	UDR0 = caractrer;
 11c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 120:	08 95       	ret

00000122 <writeTextUART>:
}

void writeTextUART(char* texto){			// "*" es un puntero del char
 122:	ac 01       	movw	r20, r24
	uint8_t i;
	for(i = 0; texto[i]!= '\0'; i++){
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	07 c0       	rjmp	.+14     	; 0x136 <writeTextUART+0x14>
		while(!(UCSR0A &(1<<UDRE0)));		//La función se queda en espera hasta que UDR este en 1
 128:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 12c:	95 ff       	sbrs	r25, 5
 12e:	fc cf       	rjmp	.-8      	; 0x128 <writeTextUART+0x6>
		UDR0 = texto[i];
 130:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UDR0 = caractrer;
}

void writeTextUART(char* texto){			// "*" es un puntero del char
	uint8_t i;
	for(i = 0; texto[i]!= '\0'; i++){
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	fa 01       	movw	r30, r20
 138:	e2 0f       	add	r30, r18
 13a:	f1 1d       	adc	r31, r1
 13c:	30 81       	ld	r19, Z
 13e:	31 11       	cpse	r19, r1
 140:	f3 cf       	rjmp	.-26     	; 0x128 <writeTextUART+0x6>
		while(!(UCSR0A &(1<<UDRE0)));		//La función se queda en espera hasta que UDR este en 1
		UDR0 = texto[i];
	}
}
 142:	08 95       	ret

00000144 <main>:
volatile uint8_t input = 0;			//Se declara la variable para selecionar los datos
volatile uint8_t flag = 1;			//Se declara la bandera para el menu

int main(void)
{
	cli();				//Se  apagan las interupcciones Globales
 144:	f8 94       	cli
	
	//LLamar a las funciones
    initUART9600();		//Se llama a la función de UART
 146:	0e 94 6b 00 	call	0xd6	; 0xd6 <initUART9600>
	ADC_init();
 14a:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	
	//Configuración de los pines para las salidas (LEDS)
	DDRB = 0xFF;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 152:	15 b8       	out	0x05, r1	; 5
	
	DDRD = 0xFF;
 154:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
 156:	1b b8       	out	0x0b, r1	; 11
	
	sei();				//Se activan las interupcciones Globales
 158:	78 94       	sei
	
	//Mandar caracteres al UART
	writeUART('H');
 15a:	88 e4       	ldi	r24, 0x48	; 72
 15c:	0e 94 8a 00 	call	0x114	; 0x114 <writeUART>
	writeUART('o');
 160:	8f e6       	ldi	r24, 0x6F	; 111
 162:	0e 94 8a 00 	call	0x114	; 0x114 <writeUART>
	writeUART('l');
 166:	8c e6       	ldi	r24, 0x6C	; 108
 168:	0e 94 8a 00 	call	0x114	; 0x114 <writeUART>
	writeUART('a');
 16c:	81 e6       	ldi	r24, 0x61	; 97
 16e:	0e 94 8a 00 	call	0x114	; 0x114 <writeUART>
	writeUART(' ');
 172:	80 e2       	ldi	r24, 0x20	; 32
 174:	0e 94 8a 00 	call	0x114	; 0x114 <writeUART>
	
	//Mandar cadena de caracteres al UART
	writeTextUART("\n\nMuchas gracias por usar el programa");
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 91 00 	call	0x122	; 0x122 <writeTextUART>
	
    while (1) 
    {
		//Configuración menu de Inicio
		if(flag == 1){
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	e1 f5       	brne	.+120    	; 0x200 <main+0xbc>
			input = 0;
 188:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <__data_end>
			//Mostrar Menu
			writeTextUART("\n\n-->¿Cúal de las siguientes opciones quiere realizar?\n");
 18c:	87 e2       	ldi	r24, 0x27	; 39
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 91 00 	call	0x122	; 0x122 <writeTextUART>
			writeTextUART("[1]Leer el potenciometro\n");
 194:	8f e5       	ldi	r24, 0x5F	; 95
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 91 00 	call	0x122	; 0x122 <writeTextUART>
			writeTextUART("[2]Enviar ASCII\n");
 19c:	89 e7       	ldi	r24, 0x79	; 121
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 91 00 	call	0x122	; 0x122 <writeTextUART>
			writeTextUART("-->Selecione una opción: ");
 1a4:	8a e8       	ldi	r24, 0x8A	; 138
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 91 00 	call	0x122	; 0x122 <writeTextUART>
			
			//El programa espera hasta que haya ingresado un valor
			while(!(input == entrada1 || input == entrada2));		//Se espera hasta que se cumpla la condición
 1ac:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
 1b0:	81 33       	cpi	r24, 0x31	; 49
 1b2:	21 f0       	breq	.+8      	; 0x1bc <main+0x78>
 1b4:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
 1b8:	82 33       	cpi	r24, 0x32	; 50
 1ba:	c1 f7       	brne	.-16     	; 0x1ac <main+0x68>
			
			//Verifica que se haya cumplido cualquiera de las dos condiciones
			switch(input){
 1bc:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
 1c0:	81 33       	cpi	r24, 0x31	; 49
 1c2:	19 f0       	breq	.+6      	; 0x1ca <main+0x86>
 1c4:	82 33       	cpi	r24, 0x32	; 50
 1c6:	91 f0       	breq	.+36     	; 0x1ec <main+0xa8>
 1c8:	1b c0       	rjmp	.+54     	; 0x200 <main+0xbc>
				
				case entrada1: //Se elige la primera Opción
				ADCSRA |= (1<<ADSC); //Inicia la Conversión ADC
 1ca:	ea e7       	ldi	r30, 0x7A	; 122
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	80 83       	st	Z, r24
				flag = 0;			//Set la bandera en 0
 1d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	2f ef       	ldi	r18, 0xFF	; 255
 1da:	89 ef       	ldi	r24, 0xF9	; 249
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <main+0x9a>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0xa4>
 1e8:	00 00       	nop
 1ea:	0a c0       	rjmp	.+20     	; 0x200 <main+0xbc>
				_delay_ms(20); //Espera a que la operación termine
				break;
				
				case entrada2: //Se elige la opción de la (ASCII) 
				writeTextUART("\n\n-->Ingrese ASCII: ");		//Ingresar el valor deL ASCII
 1ec:	84 ea       	ldi	r24, 0xA4	; 164
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 91 00 	call	0x122	; 0x122 <writeTextUART>
				flag = 0;      //Set la bandera en 0
 1f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				while(flag == 0); //Espera por el input
 1f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fc:	88 23       	and	r24, r24
 1fe:	e1 f3       	breq	.-8      	; 0x1f8 <main+0xb4>
				break;
			}
		}
		flag = 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    }
 206:	bc cf       	rjmp	.-136    	; 0x180 <main+0x3c>

00000208 <ASCII_DIG>:
		UDR0 = texto[i];
	}
}

//Configuración de la ASCII - unidades, decenas y centenas
void ASCII_DIG(uint8_t digito){
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
	uint8_t unidades, decenas, centenas;
	
	//Usando los modulos como operadores, se puede configurar para tener las posiciones
	// -> La entrada se encuntras restingida entre el intervalo [0,255], entonces se puede realizar 3 veces
	unidades = digito % 10;
 20c:	2d ec       	ldi	r18, 0xCD	; 205
 20e:	82 9f       	mul	r24, r18
 210:	c1 2d       	mov	r28, r1
 212:	11 24       	eor	r1, r1
 214:	c6 95       	lsr	r28
 216:	c6 95       	lsr	r28
 218:	c6 95       	lsr	r28
 21a:	cc 0f       	add	r28, r28
 21c:	9c 2f       	mov	r25, r28
 21e:	99 0f       	add	r25, r25
 220:	99 0f       	add	r25, r25
 222:	c9 0f       	add	r28, r25
 224:	98 2f       	mov	r25, r24
 226:	9c 1b       	sub	r25, r28
 228:	c9 2f       	mov	r28, r25
	digito = (digito - unidades)/10;
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	8c 1b       	sub	r24, r28
 22e:	91 09       	sbc	r25, r1
 230:	ea e0       	ldi	r30, 0x0A	; 10
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	bf 01       	movw	r22, r30
 236:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__divmodhi4>
	decenas = digito % 10;
 23a:	62 9f       	mul	r22, r18
 23c:	d1 2d       	mov	r29, r1
 23e:	11 24       	eor	r1, r1
 240:	d6 95       	lsr	r29
 242:	d6 95       	lsr	r29
 244:	d6 95       	lsr	r29
 246:	dd 0f       	add	r29, r29
 248:	8d 2f       	mov	r24, r29
 24a:	88 0f       	add	r24, r24
 24c:	88 0f       	add	r24, r24
 24e:	d8 0f       	add	r29, r24
 250:	86 2f       	mov	r24, r22
 252:	8d 1b       	sub	r24, r29
 254:	d8 2f       	mov	r29, r24
	digito = (digito - decenas)/10;
 256:	77 27       	eor	r23, r23
 258:	cb 01       	movw	r24, r22
 25a:	8d 1b       	sub	r24, r29
 25c:	91 09       	sbc	r25, r1
 25e:	bf 01       	movw	r22, r30
 260:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__divmodhi4>
	centenas = digito % 10;
 264:	62 9f       	mul	r22, r18
 266:	81 2d       	mov	r24, r1
 268:	11 24       	eor	r1, r1
 26a:	86 95       	lsr	r24
 26c:	86 95       	lsr	r24
 26e:	86 95       	lsr	r24
 270:	88 0f       	add	r24, r24
 272:	28 2f       	mov	r18, r24
 274:	22 0f       	add	r18, r18
 276:	22 0f       	add	r18, r18
 278:	82 0f       	add	r24, r18
 27a:	68 1b       	sub	r22, r24
 27c:	86 2f       	mov	r24, r22

	writeUART(entrada0 + centenas);
 27e:	80 5d       	subi	r24, 0xD0	; 208
 280:	0e 94 8a 00 	call	0x114	; 0x114 <writeUART>
	writeUART(entrada0 + decenas);
 284:	80 e3       	ldi	r24, 0x30	; 48
 286:	8d 0f       	add	r24, r29
 288:	0e 94 8a 00 	call	0x114	; 0x114 <writeUART>
	writeUART(entrada0 + unidades);
 28c:	80 e3       	ldi	r24, 0x30	; 48
 28e:	8c 0f       	add	r24, r28
 290:	0e 94 8a 00 	call	0x114	; 0x114 <writeUART>
	writeUART('\n');
 294:	8a e0       	ldi	r24, 0x0A	; 10
 296:	0e 94 8a 00 	call	0x114	; 0x114 <writeUART>
	writeUART('\r');
 29a:	8d e0       	ldi	r24, 0x0D	; 13
 29c:	0e 94 8a 00 	call	0x114	; 0x114 <writeUART>
}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <__vector_18>:
	UDR0 = bufferRX;
}
*/

//Configuración despues de haber leido el menu
ISR (USART_RX_vect){
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 93       	push	r18
 2b2:	3f 93       	push	r19
 2b4:	4f 93       	push	r20
 2b6:	5f 93       	push	r21
 2b8:	6f 93       	push	r22
 2ba:	7f 93       	push	r23
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
 2c0:	af 93       	push	r26
 2c2:	bf 93       	push	r27
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
	bufferRX = UDR0;
 2c8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2cc:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <bufferRX>
	
	input = bufferRX;
 2d0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <bufferRX>
 2d4:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__data_end>
	
	if(flag == 1){
 2d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	d1 f4       	brne	.+52     	; 0x314 <__vector_18+0x6e>
		if(input == entrada1){
 2e0:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
 2e4:	81 33       	cpi	r24, 0x31	; 49
 2e6:	29 f4       	brne	.+10     	; 0x2f2 <__vector_18+0x4c>
			writeTextUART("\n\nLeyendo el valor del potenciometro... ");
 2e8:	89 eb       	ldi	r24, 0xB9	; 185
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 91 00 	call	0x122	; 0x122 <writeTextUART>
 2f0:	11 c0       	rjmp	.+34     	; 0x314 <__vector_18+0x6e>
			}
			
		else if(input == entrada2){
 2f2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
 2f6:	82 33       	cpi	r24, 0x32	; 50
 2f8:	29 f4       	brne	.+10     	; 0x304 <__vector_18+0x5e>
			writeTextUART("\n\nLeyendo el valor de ASCII... ");
 2fa:	82 ee       	ldi	r24, 0xE2	; 226
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 91 00 	call	0x122	; 0x122 <writeTextUART>
 302:	08 c0       	rjmp	.+16     	; 0x314 <__vector_18+0x6e>
			}
			
		else{
			writeTextUART("\n\nEntrada inválida. Por favor ingrese 1 o 2.");
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	92 e0       	ldi	r25, 0x02	; 2
 308:	0e 94 91 00 	call	0x122	; 0x122 <writeTextUART>
			writeTextUART("\n\n-->Ingrece nuevamente la opción: ");
 30c:	8f e2       	ldi	r24, 0x2F	; 47
 30e:	92 e0       	ldi	r25, 0x02	; 2
 310:	0e 94 91 00 	call	0x122	; 0x122 <writeTextUART>
			}
	}
	
	if(flag == 0){
 314:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 318:	81 11       	cpse	r24, r1
 31a:	0f c0       	rjmp	.+30     	; 0x33a <__vector_18+0x94>
		//Configuración salidas del ASCII (LEDS)
		PORTD=(bufferRX<<6); 
 31c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <bufferRX>
 320:	82 95       	swap	r24
 322:	88 0f       	add	r24, r24
 324:	88 0f       	add	r24, r24
 326:	80 7c       	andi	r24, 0xC0	; 192
 328:	8b b9       	out	0x0b, r24	; 11
		PORTB=(bufferRX>>2); 
 32a:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <bufferRX>
 32e:	86 95       	lsr	r24
 330:	86 95       	lsr	r24
 332:	85 b9       	out	0x05, r24	; 5
		flag = 1;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 33a:	ff 91       	pop	r31
 33c:	ef 91       	pop	r30
 33e:	bf 91       	pop	r27
 340:	af 91       	pop	r26
 342:	9f 91       	pop	r25
 344:	8f 91       	pop	r24
 346:	7f 91       	pop	r23
 348:	6f 91       	pop	r22
 34a:	5f 91       	pop	r21
 34c:	4f 91       	pop	r20
 34e:	3f 91       	pop	r19
 350:	2f 91       	pop	r18
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <__vector_21>:

ISR(ADC_vect){
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	5f 93       	push	r21
 36e:	6f 93       	push	r22
 370:	7f 93       	push	r23
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
 376:	af 93       	push	r26
 378:	bf 93       	push	r27
 37a:	ef 93       	push	r30
 37c:	ff 93       	push	r31
	ASCII = ADCH;
 37e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 382:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <ASCII>
	ASCII_DIG(ASCII);
 386:	0e 94 04 01 	call	0x208	; 0x208 <ASCII_DIG>
	PORTD=(ASCII<<6);
 38a:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <ASCII>
 38e:	82 95       	swap	r24
 390:	88 0f       	add	r24, r24
 392:	88 0f       	add	r24, r24
 394:	80 7c       	andi	r24, 0xC0	; 192
 396:	8b b9       	out	0x0b, r24	; 11
	PORTB=(ASCII>>2);
 398:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <ASCII>
 39c:	86 95       	lsr	r24
 39e:	86 95       	lsr	r24
 3a0:	85 b9       	out	0x05, r24	; 5
	ADCSRA |= (1<< ADIF);	//Limpiar la bandera al encender el ADC
 3a2:	ea e7       	ldi	r30, 0x7A	; 122
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	80 61       	ori	r24, 0x10	; 16
 3aa:	80 83       	st	Z, r24
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <__divmodhi4>:
 3ce:	97 fb       	bst	r25, 7
 3d0:	07 2e       	mov	r0, r23
 3d2:	16 f4       	brtc	.+4      	; 0x3d8 <__divmodhi4+0xa>
 3d4:	00 94       	com	r0
 3d6:	07 d0       	rcall	.+14     	; 0x3e6 <__divmodhi4_neg1>
 3d8:	77 fd       	sbrc	r23, 7
 3da:	09 d0       	rcall	.+18     	; 0x3ee <__divmodhi4_neg2>
 3dc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__udivmodhi4>
 3e0:	07 fc       	sbrc	r0, 7
 3e2:	05 d0       	rcall	.+10     	; 0x3ee <__divmodhi4_neg2>
 3e4:	3e f4       	brtc	.+14     	; 0x3f4 <__divmodhi4_exit>

000003e6 <__divmodhi4_neg1>:
 3e6:	90 95       	com	r25
 3e8:	81 95       	neg	r24
 3ea:	9f 4f       	sbci	r25, 0xFF	; 255
 3ec:	08 95       	ret

000003ee <__divmodhi4_neg2>:
 3ee:	70 95       	com	r23
 3f0:	61 95       	neg	r22
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255

000003f4 <__divmodhi4_exit>:
 3f4:	08 95       	ret

000003f6 <__udivmodhi4>:
 3f6:	aa 1b       	sub	r26, r26
 3f8:	bb 1b       	sub	r27, r27
 3fa:	51 e1       	ldi	r21, 0x11	; 17
 3fc:	07 c0       	rjmp	.+14     	; 0x40c <__udivmodhi4_ep>

000003fe <__udivmodhi4_loop>:
 3fe:	aa 1f       	adc	r26, r26
 400:	bb 1f       	adc	r27, r27
 402:	a6 17       	cp	r26, r22
 404:	b7 07       	cpc	r27, r23
 406:	10 f0       	brcs	.+4      	; 0x40c <__udivmodhi4_ep>
 408:	a6 1b       	sub	r26, r22
 40a:	b7 0b       	sbc	r27, r23

0000040c <__udivmodhi4_ep>:
 40c:	88 1f       	adc	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	5a 95       	dec	r21
 412:	a9 f7       	brne	.-22     	; 0x3fe <__udivmodhi4_loop>
 414:	80 95       	com	r24
 416:	90 95       	com	r25
 418:	bc 01       	movw	r22, r24
 41a:	cd 01       	movw	r24, r26
 41c:	08 95       	ret

0000041e <_exit>:
 41e:	f8 94       	cli

00000420 <__stop_program>:
 420:	ff cf       	rjmp	.-2      	; 0x420 <__stop_program>
