
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000194  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800128  00800128  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c0  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c1  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000306  00000000  00000000  00001181  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a6  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000083  00000000  00000000  000018a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001925  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e2       	ldi	r26, 0x28	; 40
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 32       	cpi	r26, 0x29	; 41
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  9e:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
}

//Inicializar la función del UART
void initUART9600(void){
	//Paso1: Configurar pines TX y RX
	DDRD &= ~(1<<DDD0);		//Se configura el RX (PD0) como entrada
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);		//Se configura el TX (PD1) como salida
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	
	//Paso2: Configurar registro A ---> Modo FAST U2X0 = 1
	UCSR0A = 0;
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	UCSR0A |= (1<<U2X0);
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
	
	//Paso3: Configurar registro B --> Habilitar ISR RX, se habilita RX y TX
	//->>Se configura para tener interrupciones
	UCSR0B = 0;		//Se pone en 0 para mayor facilidad de configurar posteriomente
  be:	e1 ec       	ldi	r30, 0xC1	; 193
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  c4:	80 81       	ld	r24, Z
  c6:	88 69       	ori	r24, 0x98	; 152
  c8:	80 83       	st	Z, r24
	
	//Paso4: Configurar C > Frame (Se define el frame): 8 bits datos, no paridad, 1 bit de stop
	UCSR0C = 0;    //--> Se configura si se desea modo: asincrono o sincrono
  ca:	e2 ec       	ldi	r30, 0xC2	; 194
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);	//Se configura el tamaño del caracter --> 8 bits
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24
	
	//Paso5: Baudrate = 9600
	UBRR0 = 207;
  d6:	8f ec       	ldi	r24, 0xCF	; 207
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  e2:	08 95       	ret

000000e4 <writeUART>:
}

void writeUART(char caractrer){
	while(!(UCSR0A &(1<<UDRE0)));		//La función se queda en espera hasta que UDR este en 1
  e4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e8:	95 ff       	sbrs	r25, 5
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <writeUART>
	UDR0 = caractrer;
  ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f0:	08 95       	ret

000000f2 <writeTextUART>:
}

void writeTextUART(char* texto){			// "*" es un puntero del char
  f2:	ac 01       	movw	r20, r24
	uint8_t i;
	for(i = 0; texto[i]!= '\0'; i++){
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	07 c0       	rjmp	.+14     	; 0x106 <writeTextUART+0x14>
		while(!(UCSR0A &(1<<UDRE0)));		//La función se queda en espera hasta que UDR este en 1
  f8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  fc:	95 ff       	sbrs	r25, 5
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <writeTextUART+0x6>
		UDR0 = texto[i];
 100:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UDR0 = caractrer;
}

void writeTextUART(char* texto){			// "*" es un puntero del char
	uint8_t i;
	for(i = 0; texto[i]!= '\0'; i++){
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	fa 01       	movw	r30, r20
 108:	e2 0f       	add	r30, r18
 10a:	f1 1d       	adc	r31, r1
 10c:	30 81       	ld	r19, Z
 10e:	31 11       	cpse	r19, r1
 110:	f3 cf       	rjmp	.-26     	; 0xf8 <writeTextUART+0x6>
		while(!(UCSR0A &(1<<UDRE0)));		//La función se queda en espera hasta que UDR este en 1
		UDR0 = texto[i];
	}
}
 112:	08 95       	ret

00000114 <main>:

volatile char bufferRX;				//Se pine volatile a las variables que pueden cambiar en cualquier momento

int main(void)
{
    initUART9600();		//Se llama a la función de UART
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	sei();				//Se activan las interupcciones Globales
 118:	78 94       	sei
	
	//Configuración de los pines para las salidas (LEDS)
	DDRB = 0xFF;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 11e:	15 b8       	out	0x05, r1	; 5
	
	DDRD = 0xFF;
 120:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
 122:	1b b8       	out	0x0b, r1	; 11
	
	//Mandar caracteres al UART
	writeUART('H');
 124:	88 e4       	ldi	r24, 0x48	; 72
 126:	0e 94 72 00 	call	0xe4	; 0xe4 <writeUART>
	writeUART('o');
 12a:	8f e6       	ldi	r24, 0x6F	; 111
 12c:	0e 94 72 00 	call	0xe4	; 0xe4 <writeUART>
	writeUART('l');
 130:	8c e6       	ldi	r24, 0x6C	; 108
 132:	0e 94 72 00 	call	0xe4	; 0xe4 <writeUART>
	writeUART('a');
 136:	81 e6       	ldi	r24, 0x61	; 97
 138:	0e 94 72 00 	call	0xe4	; 0xe4 <writeUART>
	writeUART(' ');
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	0e 94 72 00 	call	0xe4	; 0xe4 <writeUART>
	
	//Mandar cadena de caracteres al UART
	writeTextUART("\n\nMuchas gracias por usar el programa\n");
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 79 00 	call	0xf2	; 0xf2 <writeTextUART>
	
    while (1) 
    {
		//Configuración salidas del ASCII
		PORTB = bufferRX;					//Muestra los pimeros 6 bits 0b00111111 -> PB0 a PB5
 14a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 14e:	85 b9       	out	0x05, r24	; 5
		PORTD = (bufferRX<<6);				//Muestra los ultimos 2 bits 0b11000000 -> PD6 a PD7
 150:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 154:	82 95       	swap	r24
 156:	88 0f       	add	r24, r24
 158:	88 0f       	add	r24, r24
 15a:	80 7c       	andi	r24, 0xC0	; 192
 15c:	8b b9       	out	0x0b, r24	; 11
 15e:	f5 cf       	rjmp	.-22     	; 0x14a <main+0x36>

00000160 <__vector_18>:
		UDR0 = texto[i];
	}
}

//Escribir desde la computador (mandar un eco)
ISR (USART_RX_vect){
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24
	bufferRX = UDR0;
 16c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 170:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
	
	while(!(UCSR0A &(1<<UDRE0)));		//La función se queda en espera hasta que UDR este en 1
 174:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 178:	85 ff       	sbrs	r24, 5
 17a:	fc cf       	rjmp	.-8      	; 0x174 <__vector_18+0x14>
	UDR0 = bufferRX;
 17c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 180:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 184:	8f 91       	pop	r24
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
